@()(implicit ats: ATS, rule: Program)

@getRank(ranking: RankingData) = @{ranking.getRankFromZeroIn(ats.rankings())}

@getAwardLimit(ranking: RankingData) = @{ats.rankings().getAwardLimit(rule.section(ranking.sect))}

@line(ranking: RankingData) = @{
	val station = ats.stations().byCall(ranking.call).get(0)
	Seq(
		station.call,
		ranking.city,
		ranking.sect,
		if(getRank(ranking) == 0) "優勝" else s"${1+getRank(ranking)}位",
		if(getRank(ranking) < getAwardLimit(ranking)) "入賞局" else "",
		ranking.total,
		station.name,
		station.post,
		station.addr,
		station.mail,
		station.note
	).mkString(",").concat("\n")
}

呼出符号,運用場所,参加部門,順位,入賞,得点,名前,郵便番号,住所,アドレス,コメント
@for(sect <- rule.asScala if !sect.isAbsence(); ranking <- ats.rankings().bySect(sect.name()).asScala.sortBy(-_.total)) {@line(ranking)}
